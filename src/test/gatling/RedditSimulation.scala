
import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class RedditSimulation extends Simulation {

	val httpProtocol = http
		.baseURL("http://staging.toreddit.com")

	val headers_0 = Map("Accept" -> "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")

	val headers_1 = Map("X-Requested-With" -> "XMLHttpRequest")

	val headers_2 = Map(
		"Accept" -> "application/json, text/javascript, */*; q=0.01",
		"X-Requested-With" -> "XMLHttpRequest")

	val loginScenario = exec(http("home")
			.get("/")
			.headers(headers_0))
		.pause(5)
		.exec(http("login")
			.post("/j_spring_security_check")
			.headers(headers_0)
			.formParam("username", "john")
			.formParam("password", "123"))

	
	val adminScenario = exec(http("users_page_1")
			.get("/users")
			.headers(headers_0))
		.pause(121 milliseconds)
		.exec(http("list_users_1")
			.get("/api/users?size=10&page=0&sortDir=asc&sort=username")
			.headers(headers_1))
		.pause(24)
		.exec(http("list_roles_1")
			.get("/api/users/roles")
			.headers(headers_1))
		.pause(8)
		.exec(http("modify_user_1")
			.put("/api/users/17")
			.headers(headers_1)
			.body(StringBody("""{"id":17,"username":"test","enabled":true,"roles":[{"id":5,"name":"ROLE_ADMIN","privileges":[{"id":1,"name":"USER_READ_PRIVILEGE"},{"id":2,"name":"USER_WRITE_PRIVILEGE"}]},{"id":7,"name":"ROLE_USER","privileges":[{"id":3,"name":"POST_LIMITED_PRIVILEGE"}]}],"scheduledPostsCount":0}""")).asJSON)
		.exec(http("users_page_2")
			.get("/users")
			.headers(headers_0))
		.pause(113 milliseconds)
		.exec(http("list_users_2")
			.get("/api/users?size=10&page=0&sortDir=asc&sort=username")
			.headers(headers_1))
		.pause(3)
		.exec(http("list_roles_2")
			.get("/api/users/roles")
			.headers(headers_1))
		.pause(5)
		.exec(http("modify_user_2")
			.put("/api/users/19")
			.headers(headers_1)
			.body(StringBody("""{"id":19,"username":"eugen","enabled":true,"roles":[{"id":6,"name":"ROLE_SUPER_USER","privileges":[{"id":4,"name":"POST_UNLIMITED_PRIVILEGE"}]},{"id":7,"name":"ROLE_USER","privileges":[{"id":3,"name":"POST_LIMITED_PRIVILEGE"}]}],"scheduledPostsCount":5}""")).asJSON)
		.exec(http("users_page_3")
			.get("/users")
			.headers(headers_0))
		.pause(116 milliseconds)
		.exec(http("list_users_3")
			.get("/api/users?size=10&page=0&sortDir=asc&sort=username")
			.headers(headers_1))
		.pause(2)
		.exec(http("modify_user_3")
			.put("/api/users/17")
			.headers(headers_1)
			.body(StringBody("""{"id":17,"username":"test","enabled":false,"roles":[{"id":7,"name":"ROLE_USER","privileges":[{"id":3,"name":"POST_LIMITED_PRIVILEGE"}]},{"id":5,"name":"ROLE_ADMIN","privileges":[{"id":1,"name":"USER_READ_PRIVILEGE"},{"id":2,"name":"USER_WRITE_PRIVILEGE"}]}],"scheduledPostsCount":0}""")).asJSON)
		.exec(http("users_page_4")
			.get("/users")
			.headers(headers_0))
		.pause(163 milliseconds)
		.exec(http("list_users_4")
			.get("/api/users?size=10&page=0&sortDir=asc&sort=username")
			.headers(headers_1))
		.pause(2)
		.exec(http("modify_user_4")
			.put("/api/users/17")
			.headers(headers_1)
			.body(StringBody("""{"id":17,"username":"test","enabled":true,"roles":[{"id":7,"name":"ROLE_USER","privileges":[{"id":3,"name":"POST_LIMITED_PRIVILEGE"}]},{"id":5,"name":"ROLE_ADMIN","privileges":[{"id":1,"name":"USER_READ_PRIVILEGE"},{"id":2,"name":"USER_WRITE_PRIVILEGE"}]}],"scheduledPostsCount":0}""")).asJSON)
		.exec(http("users_page_5")
			.get("/users")
			.headers(headers_0))
		.pause(117 milliseconds)
		.exec(http("list_users_5")
			.get("/api/users?size=10&page=0&sortDir=asc&sort=username")
			.headers(headers_1))


	val profileScenario = exec(http("profile_page")
			.get("/profile")
			.headers(headers_0))
		.pause(1)
		.exec(http("list_preference")
			.get("/api/user/preference")
			.headers(headers_1))
		.pause(333 milliseconds)
		.exec(http("check_available")
			.get("/api/scheduledPosts/available")
			.headers(headers_1))
		.pause(60)
		.exec(http("subreddit_autocomplete_1")
			.get("/api/subredditAutoComplete?term=ki")
			.headers(headers_2))
		.pause(107 milliseconds)
		.exec(http("subreddit_autocomplete_2")
			.get("/api/subredditAutoComplete?term=kitt")
			.headers(headers_2))
		.exec(http("subreddit_autocomplete_3")
			.get("/api/subredditAutoComplete?term=kitte")
			.headers(headers_2))
		.pause(1)
		.exec(http("subreddit_autocomplete_4")
			.get("/api/subredditAutoComplete?term=kitten")
			.headers(headers_2))
		.pause(17)
		.exec(http("modify_preference")
			.put("/api/user/preference/14")
			.headers(headers_2)
			.body(StringBody("""{"id":"14","email":"john@test.com","timezone":"Pacific/Pitcairn","subreddit":"kitten","minScoreRequired":"","timeInterval":"0","noOfAttempts":"0","minTotalVotes":"0"}""")).asJSON)
		.exec(http("home_1")
			.get("/")
			.headers(headers_0))


	val rssScenario = repeat(2) {
	    exec(http("feeds_page")
			.get("/feeds")
			.headers(headers_0))
		.exec(http("list_feeds")
			.get("/api/myFeeds")
			.headers(headers_1))
		.pause(1)
		.exec(http("feedForm")
			.get("/feedForm")
			.headers(headers_0))
		.pause(6)
		.exec(http("add_feed")
			.post("/api/myFeeds")
			.headers(headers_2)
			.body(StringBody("""{"name":"baeldung","url":"http://www.baeldung.com/feed"}""")).asJSON)
		.pause(2)
	}


	val postScenario = repeat(3) {
		exec(http("schedule_post")
			.get("/postSchedule")
			.headers(headers_0))
		.pause(314 milliseconds)
		.exec(http("get_preference")
			.get("/api/user/preference")
			.headers(headers_1))
		.pause(35)
		.exec(http("create_post")
			.post("/api/scheduledPosts")
			.headers(headers_2)
			.body(StringBody("""{"title":"test1","url":"https://www.flickr.com/photos/andrewtallon/4950395769","subreddit":"kitten","minScoreRequired":"","timeInterval":"0","noOfAttempts":"0","minTotalVotes":"0","date":"2015-11-30 12:00"}""")).asJSON)
	    .exec(http("posts_page")
			.get("/scheduledPosts")
			.headers(headers_0))
		.pause(215 milliseconds)
		.exec(http("list_posts")
			.get("/api/scheduledPosts?size=10&page=0&sortDir=asc&sort=submissionDate")
			.headers(headers_1))
		.pause(5) }
	.exec(http("list_posts_1")
		.get("/api/scheduledPosts?size=10&page=0&sortDir=desc&sort=submissionDate")
		.headers(headers_1))
	.pause(2)
	.exec(http("list_posts_2")
		.get("/api/scheduledPosts?size=10&page=0&sortDir=asc&sort=title")
		.headers(headers_1))
	.pause(3)
	.exec(http("list_posts_3")
		.get("/api/scheduledPosts?size=10&page=0&sortDir=asc&sort=noOfAttempts")
		.headers(headers_1))

	 val adminFlow = scenario("Admin Flow").exec(loginScenario).exec(adminScenario)

	 val userFlow = scenario("User Flow").exec(loginScenario).exec(profileScenario).exec(rssScenario)

	 val userSchedulingFlow = scenario("User scheduling Flow").exec(loginScenario).exec(postScenario)

	setUp(
	  adminFlow.inject(rampUsers(1) over (10 seconds)),
	  userFlow.inject(rampUsers(1) over (10 seconds)),
	  userSchedulingFlow.inject(rampUsers(2) over (10 seconds))
	).protocols(httpProtocol)


}